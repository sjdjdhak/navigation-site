name: API Proxy Service

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'API action to perform'
        required: true
        type: choice
        options:
          - 'validate-user'
          - 'get-user-config'
          - 'update-user-config'
          - 'create-user-config'
          - 'delete-user-config'
      payload:
        description: 'JSON payload for the action'
        required: false
        type: string

jobs:
  api-proxy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许写入仓库内容
      actions: read    # 允许读取Actions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Execute API Action
        id: api
        run: |
          echo "Executing action: ${{ github.event.inputs.action }}"
          echo "Payload: ${{ github.event.inputs.payload }}"
          
          # 检查ADMIN_TOKEN是否存在
          if [ -z "${{ secrets.ADMIN_TOKEN }}" ]; then
            echo "ERROR: ADMIN_TOKEN secret not configured"
            echo "result=error" >> $GITHUB_OUTPUT
            echo "error=ADMIN_TOKEN secret not configured" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "ADMIN_TOKEN secret is configured"
          fi
          
          # 根据不同的action执行不同的逻辑
          case "${{ github.event.inputs.action }}" in
            "validate-user")
              echo "Validating user credentials..."
              
              # 解析payload中的用户名和密码
              USERNAME=$(echo '${{ github.event.inputs.payload }}' | jq -r '.username // empty')
              PASSWORD=$(echo '${{ github.event.inputs.payload }}' | jq -r '.password // empty')
              
              if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
                echo "result=error" >> $GITHUB_OUTPUT
                echo "error=Missing username or password" >> $GITHUB_OUTPUT
                exit 0
              fi
              
              # 简单的用户验证逻辑（这里可以扩展为更复杂的验证）
              if [ "$USERNAME" = "admin" ] && [ "$PASSWORD" = "hello123" ]; then
                echo "result=success" >> $GITHUB_OUTPUT
                echo "data={\"username\":\"$USERNAME\",\"role\":\"admin\"}" >> $GITHUB_OUTPUT
              else
                echo "result=error" >> $GITHUB_OUTPUT
                echo "error=Invalid credentials" >> $GITHUB_OUTPUT
              fi
              ;;
            "get-user-config")
              echo "Getting user configuration..."
              USERNAME=$(echo '${{ github.event.inputs.payload }}' | jq -r '.username // empty')
              
              if [ -z "$USERNAME" ]; then
                echo "result=error" >> $GITHUB_OUTPUT
                echo "error=Missing username" >> $GITHUB_OUTPUT
                exit 0
              fi
              
              # 先检查本地文件是否存在
              if [ -f ".admin/users/${USERNAME}.json" ]; then
                echo "Found local user config file"
                echo "result=success" >> $GITHUB_OUTPUT
                echo "data=$(cat .admin/users/${USERNAME}.json | jq -c .)" >> $GITHUB_OUTPUT
              else
                echo "Local user config not found, trying GitHub API..."
                # 使用GitHub API获取用户配置
                HTTP_STATUS=$(curl -w "%{http_code}" -s -o github_response.json \
                  -H "Authorization: token ${{ secrets.ADMIN_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/contents/.admin/users/${USERNAME}.json")
                
                if [ "$HTTP_STATUS" = "200" ]; then
                  # 从GitHub API响应中提取并解码文件内容
                  CONTENT=$(cat github_response.json | jq -r '.content' | base64 -d)
                  echo "result=success" >> $GITHUB_OUTPUT
                  echo "data=$(echo "$CONTENT" | jq -c .)" >> $GITHUB_OUTPUT
                else
                  echo "result=error" >> $GITHUB_OUTPUT
                  echo "error=User config not found (HTTP: $HTTP_STATUS)" >> $GITHUB_OUTPUT
                fi
              fi
              ;;
            "update-user-config")
              echo "Updating user configuration..."
              # 更新用户配置逻辑
              echo "result=success" >> $GITHUB_OUTPUT
              echo "data={\"message\":\"Configuration updated\"}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "result=error" >> $GITHUB_OUTPUT
              echo "error=Unknown action: ${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
              ;;
          esac
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }}

      - name: Create and upload result to repository
        run: |
          # 获取输出值，处理空值情况
          STATUS="${{ steps.api.outputs.result }}"
          DATA="${{ steps.api.outputs.data }}"
          ERROR="${{ steps.api.outputs.error }}"
          
          # 如果DATA为空，设置为null
          if [ -z "$DATA" ] || [ "$DATA" = "" ]; then
            DATA="null"
          fi
          
          # 如果ERROR为空，设置为空字符串
          if [ -z "$ERROR" ]; then
            ERROR=""
          fi
          
          # 生成唯一的结果文件名
          RESULT_FILE="api-result-${{ github.run_id }}-$(date +%s).json"
          
          # 生成JSON结果
          cat > "${RESULT_FILE}" << EOF
          {
            "status": "${STATUS}",
            "data": ${DATA},
            "error": "${ERROR}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "runId": "${{ github.run_id }}"
          }
          EOF
          
          echo "Generated API response:"
          cat "${RESULT_FILE}"
          
          # 将结果文件提交到仓库的 .actions-results 目录
          mkdir -p .actions-results
          cp "${RESULT_FILE}" .actions-results/
          
          # 配置git
          echo "Configuring git..."
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 提交结果文件
          echo "Adding result file to git..."
          git add -f .actions-results/"${RESULT_FILE}"
          
          echo "Committing result file..."
          if git commit -m "Add API result: ${RESULT_FILE}"; then
            echo "Commit successful"
          else
            echo "No changes to commit or commit failed"
          fi
          
          # 推送到仓库
          echo "Pushing to repository..."
          if git push origin main; then
            echo "Push successful"
          else
            echo "Push failed, but continuing..."
          fi
          
          # 输出结果文件路径供前端获取
          echo "result-file=${RESULT_FILE}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_TOKEN }} 